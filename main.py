import logging
import os
import asyncio
import sqlite3
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types, F
from database import get_products
from database import is_admin
from database import save_user
from database import save_barber
from database import update_barber
from database import remove_barber
from database import get_all_barbers
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.filters import CommandObject  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")  # –£–∫–∞–∂–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(F.contact)
async def save_phone(message: types.Message):
    if not message.contact:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        return

    user_id = message.from_user.id
    full_name = message.from_user.full_name
    phone_number = message.contact.phone_number

    save_user(user_id, full_name, phone_number)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É", callback_data="book")],
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å —É–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="shop")],
        [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="gemini_chat")]
    ])
    await message.answer("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)




@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíà –ë–∞—Ä–±–µ—Ä—ã", callback_data="manage_barbers")],
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data="manage_bookings")],
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="manage_products")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]

    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíà –ë–∞—Ä–±–µ—Ä—ã", callback_data="manage_barbers")],
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data="manage_bookings")],
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="manage_products")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ä–±–µ—Ä–∞–º–∏
@dp.callback_query(F.data == "manage_barbers")
async def manage_barbers_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞", callback_data="add_barber")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤", callback_data="list_barbers")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞", callback_data="edit_barber")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞", callback_data="delete_barber")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    await callback.message.answer("üíà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞–º–∏:", reply_markup=keyboard)

class AddBarber(StatesGroup):
    name = State()
    specialization = State()
    photo = State()

@dp.callback_query(F.data == "add_barber")
async def add_barber_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddBarber.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞—Ä–±–µ—Ä–∞:")

@dp.message(AddBarber.name)
async def add_barber_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddBarber.specialization)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞—Ä–±–µ—Ä–∞:")

@dp.message(AddBarber.specialization)
async def add_barber_specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await state.set_state(AddBarber.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞—Ä–±–µ—Ä–∞:")

@dp.message(AddBarber.photo, F.photo)
async def add_barber_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
    data = await state.get_data()

    save_barber(data["name"], data["specialization"], photo_id)
    await state.clear()
    await message.answer("‚úÖ –ë–∞—Ä–±–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")


class EditBarber(StatesGroup):
    barber_id = State()
    new_name = State()
    new_specialization = State()
    new_photo = State()

@dp.callback_query(F.data == "edit_barber")
async def edit_barber_start(callback: types.CallbackQuery, state: FSMContext):
    barbers = get_all_barbers()
    if not barbers:
        await callback.message.answer("‚ùå –ù–µ—Ç –±–∞—Ä–±–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{barber[1]}", callback_data=f"edit_{barber[0]}")]
        for barber in barbers
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("edit_"))
async def select_barber_to_edit(callback: types.CallbackQuery, state: FSMContext):
    barber_id = int(callback.data.split("_")[1])
    await state.update_data(barber_id=barber_id)
    await state.set_state(EditBarber.new_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –±–∞—Ä–±–µ—Ä–∞:")

@dp.message(EditBarber.new_name)
async def edit_barber_name(message: types.Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await state.set_state(EditBarber.new_specialization)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")

@dp.message(EditBarber.new_specialization)
async def edit_barber_specialization(message: types.Message, state: FSMContext):
    await state.update_data(new_specialization=message.text)
    await state.set_state(EditBarber.new_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ):")

@dp.message(EditBarber.new_photo, F.photo | F.text)
async def edit_barber_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id if message.photo else None

    update_barber(data["barber_id"], data["new_name"], data["new_specialization"], photo_id)
    await state.clear()
    await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ä–±–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

#—Å–ø–∏–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤
@dp.callback_query(F.data == "list_barbers")
async def list_barbers(callback: types.CallbackQuery):
    barbers = get_all_barbers()

    if not barbers:
        await callback.message.answer("‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –±–∞—Ä–±–µ—Ä–æ–≤.")
        return

    text = "üíà <b>–°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤:</b>\n\n"
    for barber in barbers:
        text += f"üîπ <b>{barber[1]}</b> (ID: {barber[0]})\n"

    await callback.message.answer(text, parse_mode="HTML")


# —É–¥–∞–ª–µ–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞
@dp.callback_query(F.data == "delete_barber")
async def delete_barber_start(callback: types.CallbackQuery):
    barbers = get_all_barbers()
    if not barbers:
        await callback.message.answer("‚ùå –ù–µ—Ç –±–∞—Ä–±–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ùå {barber[1]}", callback_data=f"delete_{barber[0]}")]
        for barber in barbers
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_"))
async def delete_barber(callback: types.CallbackQuery):
    barber_id = int(callback.data.split("_")[1])
    remove_barber(barber_id)
    await callback.message.answer("‚úÖ –ë–∞—Ä–±–µ—Ä —É–¥–∞–ª–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
@dp.callback_query(lambda c: c.data == "manage_bookings")
async def manage_bookings(callback_query: CallbackQuery):
    bookings = get_bookings()
    if not bookings:
        await callback_query.message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É.")
        await callback_query.answer()
        return

    for book in bookings:
        book_id, user_name, barber_name, date, time = book
        text = f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}\nüíà –ë–∞—Ä–±–µ—Ä: {barber_name}\nüìÖ –î–∞—Ç–∞: {date}\n‚è∞ –í—Ä–µ–º—è: {time}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{book_id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{book_id}")],
            [InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="ignore")]
        ])
        await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(F.data == "admin_menu")
async def admin_menu(callback: types.CallbackQuery):
    await callback.message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏

def get_bookings():
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT bookings.id, users.full_name, barbers.name, bookings.date, bookings.time
        FROM bookings
        JOIN users ON bookings.user_id = users.id
        JOIN barbers ON bookings.barber_id = barbers.id
        ORDER BY bookings.date, bookings.time
    """)
    bookings = cursor.fetchall()
    conn.close()
    print("DEBUG: get_bookings() ->", bookings)  # –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    return bookings

def update_booking(booking_id, new_date=None, new_time=None, new_barber_id=None):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    if new_date:
        cursor.execute("UPDATE bookings SET date = ? WHERE id = ?", (new_date, booking_id))
    if new_time:
        cursor.execute("UPDATE bookings SET time = ? WHERE id = ?", (new_time, booking_id))
    if new_barber_id:
        cursor.execute("UPDATE bookings SET barber_id = ? WHERE id = ?", (new_barber_id, booking_id))
    conn.commit()
    conn.close()

def delete_booking(booking_id):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM bookings WHERE id = ?", (booking_id,))
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_booking_handler(callback_query: CallbackQuery):
    booking_id = int(callback_query.data.split("_")[1])
    delete_booking(booking_id)
    await callback_query.message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_booking_handler(callback_query: CallbackQuery):
    booking_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data=f"edit_date_{booking_id}")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_time_{booking_id}")],
        [InlineKeyboardButton(text="üíá –ë–∞—Ä–±–µ—Ä", callback_data=f"edit_barber_{booking_id}")]
    ])
    await callback_query.message.answer("üîß –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await callback_query.answer()



# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É)
def get_barbers():
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM barbers")
    barbers = cursor.fetchall()
    conn.close()
    return barbers

def get_booked_slots(barber_id, date):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT time FROM bookings WHERE barber_id = ? AND date = ?", (barber_id, date))
    booked_times = {row[0] for row in cursor.fetchall()}
    conn.close()
    return booked_times

def save_booking(user_id, barber_id, date, time):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO bookings (user_id, barber_id, date, time) VALUES (?, ?, ?, ?)",
                   (user_id, barber_id, date, time))
    conn.commit()
    conn.close()

def get_barber_name(barber_id):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM barbers WHERE id = ?", (barber_id,))
    barber_name = cursor.fetchone()
    conn.close()
    return barber_name[0] if barber_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞—Ä–±–µ—Ä"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —É–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"
@dp.callback_query(lambda c: c.data == "shop")
async def shop_catalog(callback_query: CallbackQuery):
    products = get_products()
    if not products:
        await callback_query.message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        await callback_query.answer()
        return

    for prod in products:
        prod_id, name, price, desc, photo_url = prod
        text = f"{name}\n–¶–µ–Ω–∞: {price}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"prodinfo_{prod_id}"),
                InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{prod_id}")
            ]
        ])

        if photo_url:
            try:
                with open(photo_url, 'rb') as photo:
                    await callback_query.message.answer_photo(
                        photo=photo,
                        caption=text,
                        reply_markup=keyboard
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback_query.message.answer(text, reply_markup=keyboard)
        else:
            await callback_query.message.answer(text, reply_markup=keyboard)
    
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_user(user_id, full_name, phone):
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id, full_name, phone) VALUES (?, ?, ?)", (user_id, full_name, phone))
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#@dp.message(Command("start"))
#async def start_command(message: types.Message):
    #keyboard = InlineKeyboardMarkup(inline_keyboard=[
        #[InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É", callback_data="book")],
        #[InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å —É–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="shop")],
        #[InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data="gemini_chat")]
    #])
    #await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–Ω–∏—è —Å Gemini
@dp.callback_query(lambda c: c.data == "gemini_chat")
async def gemini_chat_start(callback_query: CallbackQuery):
    await callback_query.message.answer("üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini.")
    await callback_query.answer()

@dp.message()
async def gemini_chat(message: types.Message):
    response = model.generate_content(message.text)
    await message.answer(response.text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É"
@dp.callback_query(lambda c: c.data == "book")
async def book_appointment(callback_query: CallbackQuery):
    barbers = get_barbers()
    if not barbers:
        await callback_query.message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤.")
        await callback_query.answer()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=barber[1], callback_data=f"barber_{barber[0]}")]
        for barber in barbers
    ])
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:", reply_markup=keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞—Ä–±–µ—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("barber_"))
async def select_barber(callback_query: CallbackQuery):
    barber_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for i in range(7):
        date = (datetime.datetime.now() + datetime.timedelta(days=i)).strftime("%Y-%m-%d")
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=date, callback_data=f"date_{barber_id}_{date}")]
        )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("date_"))
async def select_date(callback_query: CallbackQuery):
    _, barber_id, date = callback_query.data.split("_")
    booked_slots = get_booked_slots(barber_id, date)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for hour in range(9, 22):
        time_slot = f"{hour}:00"
        if time_slot not in booked_slots:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=time_slot, callback_data=f"time_{barber_id}_{date}_{time_slot}")]
            )
    if keyboard.inline_keyboard:
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    else:
        await callback_query.message.answer("‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("time_"))
async def select_time(callback_query: CallbackQuery):
    _, barber_id, date, time = callback_query.data.split("_")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_{barber_id}_{date}_{time}")]
    ])
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {time} –Ω–∞ {date}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:", reply_markup=keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_booking(callback_query: CallbackQuery):
    _, barber_id, date, time = callback_query.data.split("_")
    user_id = callback_query.from_user.id
    barber_name = get_barber_name(barber_id)
    save_booking(user_id, barber_id, date, time)
    await callback_query.message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüíà –ë–∞—Ä–±–µ—Ä: {barber_name}\nüìÖ –î–∞—Ç–∞: {date}\nüïí –í—Ä–µ–º—è: {time}"
    )
    if ADMIN_ID:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\nüë§ –ö–ª–∏–µ–Ω—Ç: {callback_query.from_user.full_name}\nüíà –ë–∞—Ä–±–µ—Ä: {barber_name}\nüìÖ –î–∞—Ç–∞: {date}\nüïí –í—Ä–µ–º—è: {time}"
        )
    await callback_query.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –æ —Ç–æ–≤–∞—Ä–µ
@dp.callback_query(lambda c: c.data.startswith("prodinfo_"))
async def product_info(callback_query: CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    conn = sqlite3.connect("barbershop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, description, photo_url FROM products WHERE id=?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await callback_query.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    name, price, desc, photo_url = product

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    text = f"{name}\n–¶–µ–Ω–∞: {price}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")]
    ])

    try:
        if photo_url.startswith("http"):
            await callback_query.message.answer_photo(photo=photo_url, caption=text, reply_markup=keyboard)
        else:
            photo = FSInputFile(photo_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            await callback_query.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")



    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_product(callback_query: CallbackQuery):
    _, prod_id = callback_query.data.split("_")
    products = get_products()
    product = next((p for p in products if p[0] == int(prod_id)), None)
    if not product:
        await callback_query.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return
    await callback_query.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä '{product[1]}' –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )
    await callback_query.answer()




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
